generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart_items {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  qty        Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  products   products @relation(fields: [product_id], references: [id], map: "fk_cart_product")
  users      users    @relation(fields: [user_id], references: [id], map: "fk_cart_user")

  @@unique([user_id, product_id], map: "uq_cart_user_product")
  @@index([product_id], map: "fk_cart_product")
  @@index([user_id], map: "idx_cart_user")
}

model categories {
  id               Int          @id @default(autoincrement())
  name             String
  slug             String       @unique(map: "slug")
  parent_id        Int?
  categories       categories?  @relation("categoriesTocategories", fields: [parent_id], references: [id], map: "fk_categories_parent")
  other_categories categories[] @relation("categoriesTocategories")
  products         products[]

  @@index([parent_id], map: "fk_categories_parent")
}

model order_items {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  qty        Int
  unit_price Decimal  @db.Decimal(12, 2)
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "fk_order_items_order")
  products   products @relation(fields: [product_id], references: [id], map: "fk_order_items_product")

  @@index([product_id], map: "fk_order_items_product")
  @@index([order_id], map: "idx_order_items_order")
}

model orders {
  id             Int                   @id @default(autoincrement())
  user_id        Int
  status         orders_status         @default(CREATED)
  payment_status orders_payment_status @default(PENDING)
  total_amount   Decimal               @db.Decimal(12, 2)
  shipping_json  Json?
  created_at     DateTime              @default(now())
  order_items    order_items[]
  users          users                 @relation(fields: [user_id], references: [id], map: "fk_orders_user")

  @@index([user_id, created_at], map: "idx_orders_user_created")
}

model product_images {
  id         Int      @id @default(autoincrement())
  product_id Int
  url        String   @db.VarChar(512)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_images_product")

  @@index([product_id], map: "fk_images_product")
}

model products {
  id             Int              @id @default(autoincrement())
  title          String
  slug           String           @unique(map: "slug")
  description    String           @db.Text
  price          Decimal          @db.Decimal(12, 2)
  currency       String           @default("VND") @db.VarChar(8)
  stock          Int              @default(0)
  active         Boolean          @default(true)
  category_id    Int
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  cart_items     cart_items[]
  order_items    order_items[]
  product_images product_images[]
  categories     categories       @relation(fields: [category_id], references: [id], map: "fk_products_category")

  @@index([active], map: "idx_products_active")
  @@index([category_id], map: "idx_products_category")
  @@index([created_at], map: "idx_products_created_at")
}

model users {
  id            Int          @id @default(autoincrement())
  email         String       @unique(map: "email")
  password_hash String       @db.VarChar(255)
  role          users_role   @default(USER)
  created_at    DateTime     @default(now())
  cart_items    cart_items[]
  orders        orders[]
}

enum orders_status {
  CREATED
  PAID
  CANCELLED
}

enum users_role {
  USER
  ADMIN
}

enum orders_payment_status {
  PENDING
  PAID_FAKE
}
